import Stock from './Stock'

type SignalParams = {
	/**
	 * The price where the signal was executed
	 */
	price: number
	/**
	 * Date when the signal was executed
	 */
	date: Date
	/**
	 * If it is a buy or sell order
	 */
	action: 'buy' | 'sell'
	/**
	 * If it was entry or exit from the market
	 */
	type: 'enter' | 'exit'
	/**
	 * Pending or already executed order?
	 */
	status: 'pending' | 'executed'
	/**
	 * The stock which the order belongs to
	 */
	stock: Stock
}

/**
 * Class to keep keep track of the signals generated by the strategies.
 * Will mainly be used to calculate P&L of positions.
 */
class Signal {
	public price: number
	public date: Date
	public action: 'buy' | 'sell'
	public type: 'enter' | 'exit'
	public status: 'pending' | 'executed'
	public stock: Stock

	/**
	 * Creates a Signal instance
	 * @param {Object} params
	 * @param {Object} params.stock The stock that the signal belongs to
	 * @param {Number} params.price The price where the signal was executed
	 * @param {Date} params.date The date where the signal was executed
	 * @param {String} params.action "buy" or "sell"
	 * @param {String} params.type "enter" or "exit"
	 */
	constructor({ stock, price, date, action, type }: SignalParams) {
		if (
			!this.validateInput({
				stock,
				price,
				action,
				type,
			})
		) {
			throw new Error('Required field missing')
		}
		// Class fields:
		// TODO Make private when able to
		this.stock = stock

		this.price = price
		this.date = date instanceof Date ? date : new Date(date)
		this.action = action
		this.type = type
		this.status = date === null && price === null ? 'pending' : 'executed'
	}

	/**
	 * Validates that all the required fields for creating a signal has valid values.
	 * @param {Object} params
	 * @param {Object} params.stock The stock that the signal belongs to
	 * @param {Number} params.price The price where the signal was executed
	 * @param {String} params.action "buy" or "sell"
	 * @param {String} params.type "enter" or "exit"
	 * @returns {Boolean} is the input valid
	 */
	validateInput({
		stock,
		price,
		action,
		type,
	}: Pick<SignalParams, 'stock' | 'price' | 'action' | 'type'>): boolean {
		const isStockValid = Boolean(stock) // This should later on be 'instanceof stock...'
		const isPriceValid = (typeof price === 'number' && price >= 0) || price === null
		const isActionValid =
			typeof action === 'string' &&
			(action.toLowerCase() === 'buy' || action.toLowerCase() === 'sell')
		const isTypeValid =
			typeof type === 'string' &&
			(type.toLowerCase() === 'enter' || type.toLowerCase() === 'exit')

		return isStockValid && isPriceValid && isActionValid && isTypeValid
	}
}

export default Signal
